{"version":3,"sources":["scripts/engine.js","img/rps_rock.png","img/rps_paper.png","img/rps_scissors.png","components/buttonGroup.js","App.js","reportWebVitals.js","index.js"],"names":["ACTIONS","ROCK","PAPER","SCISSORS","RESULTS","WIN","LOSE","DRAW","engineResources","computerPlay","result","roll","Math","random","floor","console","warn","playRound","playerChoice","computerChoice","toLowerCase","ButtonGroup","buttons","clickFunction","useState","clickedId","setClickedId","className","Object","values","map","objVal","i","onClick","e","id","prevState","handleClick","imgSelector","action","rock","paper","scissors","App","image","player","computer","input","gameState","setGameState","playerScore","computerScore","effectState","setEffectState","btnState","setBtnState","count","setCount","useEffect","setTimeout","newInput","getAttribute","newImage","rps","roundResult","src","alt","target","click","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2756548e.chunk.js","sourcesContent":["const ACTIONS = {\n  ROCK: 'rock',\n  PAPER: 'paper',\n  SCISSORS: 'scissors'\n};\n\nconst RESULTS = {\n    WIN: 'win',\n    LOSE: 'lose',\n    DRAW: 'draw'\n}\n\nconst computerPlay = () => {\n    let roll = Math.random() * 300, result;\n    switch (true) {\n        case Math.floor(roll) % 3 === 0:\n            result = ACTIONS.ROCK;\n            break;\n        case Math.floor(roll) % 3 === 1:\n            result = ACTIONS.PAPER;\n            break;\n        case Math.floor(roll) % 3 === 2:\n            result = ACTIONS.SCISSORS;\n            break;\n        default:\n            console.warn('result outside parameter');\n            break;\n    }\n    return result;\n}\n\nconst playRound = (playerChoice, computerChoice) => {\n    playerChoice = playerChoice.toLowerCase();\n    if (playerChoice === ACTIONS.ROCK) {\n        switch (computerChoice) {\n            case ACTIONS.ROCK:\n                return RESULTS.DRAW;\n            case ACTIONS.PAPER:\n                return RESULTS.LOSE;\n            case ACTIONS.SCISSORS:\n                return RESULTS.WIN;\n            default:\n                return null;\n        }\n    } else if (playerChoice === ACTIONS.PAPER) {\n        switch (computerChoice) {\n            case ACTIONS.ROCK:\n                return RESULTS.WIN;\n            case ACTIONS.PAPER:\n                return RESULTS.DRAW;\n            case ACTIONS.SCISSORS:\n                return RESULTS.LOSE;\n            default:\n                return null;\n        }\n    } else {\n        switch (computerChoice) {\n            case ACTIONS.ROCK:\n                return RESULTS.LOSE;\n            case ACTIONS.PAPER:\n                return RESULTS.WIN;\n            case ACTIONS.SCISSORS:\n                return RESULTS.DRAW;\n            default:\n                return null;\n        }\n    }\n}\n\n// let userInput = process.argv[2];\n// let computerInput = computerPlay();\n// console.log(`\\nComputer picked: ${computerInput}`);\n// console.log(playRound(userInput, computerInput));\n// console.log('\\n');\n\nconst engineResources = { computerPlay, playRound, ACTIONS, RESULTS };\nexport default engineResources;","export default __webpack_public_path__ + \"static/media/rps_rock.9dda4a20.png\";","export default __webpack_public_path__ + \"static/media/rps_paper.f39b6977.png\";","export default __webpack_public_path__ + \"static/media/rps_scissors.960c262a.png\";","import React, { useState } from 'react';\nimport '../App.css';\n\nconst ButtonGroup = ({ buttons, clickFunction }) => {\n    //takes in one input parameter buttons where button is an object with key value pairs\n    const [clickedId, setClickedId] = useState(() => -1);\n    const handleClick = (e, id) => {\n        if (id === clickedId) {\n            setClickedId(prevState => -1);\n            clickFunction(e);\n        } else {\n            setClickedId(prevState => id);\n            clickFunction(e);\n        }\n    }\n\n    return (\n        <div className=\"btn-group\">\n            {Object.values(buttons).map((objVal, i) => (\n                <button \n                    key={i}\n                    data-value={objVal}\n                    onClick={(e) => handleClick(e, i)}\n                    className={i === clickedId ? 'active' : ''}\n                >\n                    {objVal}\n                </button>\n            ))}\n        </div>\n    );\n};\n\n\nexport default ButtonGroup;","import React, { useState, useEffect} from 'react';\nimport './App.css';\nimport engineResources from './scripts/engine.js';\nimport rock from './img/rps_rock.png';\nimport paper from './img/rps_paper.png';\nimport scissors from './img/rps_scissors.png';\nimport ButtonGroup from './components/buttonGroup.js';\nconst { computerPlay, playRound, ACTIONS, RESULTS } = engineResources;\n\n\nconst imgSelector = (action) => {\n  switch (action) {\n    case ACTIONS.ROCK:\n      return rock;\n    case ACTIONS.PAPER:\n      return paper;\n    case ACTIONS.SCISSORS:\n      return scissors;\n    default:\n      return null;\n  }\n}\n\n\nfunction App() {\n  const [gameState, setGameState] = useState(() => ({\n    image: {player: null, computer: null},\n    input: {player: '', computer: ''}\n  }));\n\n\n  const [effectState, setEffectState] = useState(() => ({\n    result: null,\n    playerScore: 0,\n    computerScore: 0\n  }));\n\n  const [btnState, setBtnState] = useState(() => null);\n\n  const [count, setCount] = useState(() => 0);\n\n  \n  useEffect(() => {\n    if (count > 0) {\n      setTimeout(() => setCount(prevState => prevState - 1), 300)\n    } else {\n      if (!btnState) {\n        return null;\n      }\n      rps();\n    }\n  }, [count])\n\n\n  useEffect(() => {\n    if(!gameState.input.player) {\n      return null;\n    } else {\n      const roundResult = playRound(gameState.input.player, gameState.input.computer);\n      switch (roundResult) {\n        case RESULTS.WIN:\n          setEffectState(prevState => {\n            return {...prevState, result: roundResult, playerScore: prevState.playerScore + 1 };\n          });\n          break;\n        case RESULTS.LOSE:\n          setEffectState(prevState => {\n            return {...prevState, result: roundResult, computerScore: prevState.computerScore + 1 };\n          });\n          break;\n        case RESULTS.DRAW:\n          setEffectState(prevState => {\n            return {...prevState, result: roundResult };\n          });\n          break;\n        default:\n          return null;\n      };\n    }\n  }, [gameState]);\n  \n\n  function btnClickFunction(e) {\n    e.target === btnState ? setBtnState(prevState => null) : setBtnState(prevState => e.target);\n  }\n\n\n  function rps() {\n    const newInput = {player: btnState.getAttribute('data-value'), computer: computerPlay()}; \n    const newImage = {player: imgSelector(newInput.player), computer: imgSelector(newInput.computer)};\n    setGameState(prevState => {\n      return {image: newImage, input: newInput};\n    });\n  };\n\n\n  function resetOnClick() {\n    setGameState(prevState => {\n      return {\n        image: {player: null, computer: null},\n        input: {player: '', computer: ''}\n      };\n    });\n    setEffectState(prevState => {\n      return {\n        result: null,\n        playerScore: 0,\n        computerScore: 0\n      };\n    });\n    btnState.click();\n    setBtnState(prevState => null);\n  };\n\n\n  function goOnClick() {\n    setCount(prevState => 3);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>World RPS Championship</h1>\n        <h2>(You vs the best, Rock Paper Scissors!)</h2>\n      </header>\n      <div className=\"App-body\">\n        <div className=\"game-display\">\n          <div className=\"label\">\n            <div className=\"player\">\n              <h2>{effectState.playerScore}</h2>\n              <h1>Player</h1>\n            </div>\n            <div className=\"computer\">\n              <h1>Champ</h1>\n              <h2>{effectState.computerScore}</h2>\n            </div>\n          </div>\n          <div className=\"illustration\">\n            <div className=\"player-img\">\n              <img src={gameState.image.player} alt={`${gameState.input.player}`}/>\n            </div>\n            <div className=\"computer-img\">\n              <img src={gameState.image.computer} alt={`${gameState.input.computer}`} />\n            </div>\n          </div>\n        </div>\n        <div className=\"result\">\n          <h2>{count <= 0 ? effectState.result : count}</h2>\n        </div>\n        <ButtonGroup buttons={ACTIONS} clickFunction={btnClickFunction}/>\n        <div className=\"btn-controls\">\n          <button onClick={resetOnClick} disabled={count > 0 ? true : false}>Reset</button>\n          <button onClick={goOnClick} disabled={count > 0 || !btnState ? true : false}>Go!</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}